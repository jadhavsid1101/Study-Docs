Sqoop Learnings 2

****Import Arguments******
Argument	Description
--append								*****DONE********
--as-avrodatafile						*****DONE********
--as-sequencefile						*****DONE********
--as-textfile							*****DONE********
--as-parquetfile						*****DONE********
--boundary-query <statement>			*****DONE********
--columns <col,col,colâ€¦>				*****DONE********
--delete-target-dir						*****DONE********
--direct								Use direct connector if exists for the database
--fetch-size <n>						Number of entries to read from database at once.
--inline-lob-limit <n>					Set the maximum size for an inline LOB
-m,--num-mappers <n>					*****DONE********
-e,--query <statement>					Import the results of statement.
--split-by <column-name>				*****DONE********
--autoreset-to-one-mapper			    *****DONE********
--table <table-name>					*****DONE********
--target-dir <dir>						*****DONE********
--warehouse-dir <dir>					*****DONE********
--where <where clause>					WHERE clause to use during import
-z,--compress							*****DONE********
--compression-codec <c>					*****DONE********
--null-string <null-string>				The string to be written for a null value for string columns
--null-non-string <null-string>			The string to be written for a null value for non-string columns


1) --split-by
--Should be used when the table to be imported does not have primary key
--Sqoop uses the specified column for splitting data while importing
--split-by column must be numberic
--if split-by column is not numberic the you will have to pass additional argument 	-Dorg.apache.sqoop.splitter.allow_text_splitter=true(can be passed in sqoop.property file also)
--**Good to follow Things**--
1.Column should be indexed--For performance
2.Values in the field should be sparse--For equal partitions of mappers
3.Also it should be sequence generated or evenly incremented--For equal partitions of mappers
4.Null values will be skipped


a.Split by numeric
sqoop import \
--connect jdbc:mysql://192.168.56.101:3306/retail_db \
--username root \
--password cloudera \
--table order_items_nopk \
--split-by order_id

b.Split by varchar
sqoop import \
-Dorg.apache.sqoop.splitter.allow_text_splitter=true
--connect jdbc:mysql://192.168.56.101:3306/retail_db \
--username root \
--password cloudera \
--table orders \
--split-by order_status

2)--autoreset-to-one-mapper
--Should be used when the table to be imported does not have primary key and you do not want to use -splitby

sqoop import \
--connect jdbc:mysql://192.168.56.101:3306/retail_db \
--username root \
--password cloudera \
--table order_items_nopk \
--autoreset-to-one-mapper

3)--compress {-z} and --compression-codec <c>
-We can compress imported to save storage space
-By using --compress or -z
-Default compression algorithm is gzip
-We can use other compression algorithms by using --compression-codec property

sqoop import \
--connect jdbc:mysql://192.168.56.101:3306/retail_db \
--username root \
--password cloudera \
--table orders \
--compress

--Comments--unzip files by guzip command


4) --boundary-query
-We can use this argument to specify the splits range by specifying MIN and MAX

sqoop import \
--connect jdbc:mysql://192.168.56.101:3306/retail_db \
--username root \
--password cloudera \
--table orders \
--boundary-query 'select 1,10 from orders' \
-m 1